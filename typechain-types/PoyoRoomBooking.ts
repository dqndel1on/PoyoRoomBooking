/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type RoomStatusStruct = {
  isOccupied: boolean;
  roomNumber: BigNumberish;
  time: BigNumberish;
  usedBy: string;
  bookingAddress: string;
  branch: string;
};

export type RoomStatusStructOutput = [
  boolean,
  BigNumber,
  BigNumber,
  string,
  string,
  string
] & {
  isOccupied: boolean;
  roomNumber: BigNumber;
  time: BigNumber;
  usedBy: string;
  bookingAddress: string;
  branch: string;
};

export interface PoyoRoomBookingInterface extends utils.Interface {
  functions: {
    "addBranch(uint256,uint256,string)": FunctionFragment;
    "checkIn(uint256,uint256,string,uint256,string)": FunctionFragment;
    "checkOut(string,uint256,uint256)": FunctionFragment;
    "customers(string,uint256)": FunctionFragment;
    "deleteBranch(uint256)": FunctionFragment;
    "getConversionRate(uint256)": FunctionFragment;
    "getLatestPrice()": FunctionFragment;
    "getRoomStatus(string,uint256)": FunctionFragment;
    "motelBranches(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "totalBranches()": FunctionFragment;
    "updateBranchDetails(uint256,string,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBranch",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIn",
    values: [BigNumberish, BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkOut",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "customers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteBranch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConversionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoomStatus",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "motelBranches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBranches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBranchDetails",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addBranch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "customers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteBranch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConversionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoomStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "motelBranches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBranches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBranchDetails",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PoyoRoomBooking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoyoRoomBookingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBranch(
      _branchId: BigNumberish,
      _totalRooms: BigNumberish,
      _branchName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkIn(
      _roomNumber: BigNumberish,
      _branchId: BigNumberish,
      _branchName: string,
      _time: BigNumberish,
      _usedBy: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkOut(
      _branchName: string,
      _branchId: BigNumberish,
      _roomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    customers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, string, string, string] & {
        isOccupied: boolean;
        roomNumber: BigNumber;
        time: BigNumber;
        usedBy: string;
        bookingAddress: string;
        branch: string;
      }
    >;

    deleteBranch(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getConversionRate(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLatestPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoomStatus(
      _branchName: string,
      _roomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[RoomStatusStructOutput]>;

    motelBranches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        branchName: string;
        totalRooms: BigNumber;
        branchId: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    totalBranches(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateBranchDetails(
      _branchId: BigNumberish,
      _branchName: string,
      _totalRooms: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBranch(
    _branchId: BigNumberish,
    _totalRooms: BigNumberish,
    _branchName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkIn(
    _roomNumber: BigNumberish,
    _branchId: BigNumberish,
    _branchName: string,
    _time: BigNumberish,
    _usedBy: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkOut(
    _branchName: string,
    _branchId: BigNumberish,
    _roomNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  customers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, string, string, string] & {
      isOccupied: boolean;
      roomNumber: BigNumber;
      time: BigNumber;
      usedBy: string;
      bookingAddress: string;
      branch: string;
    }
  >;

  deleteBranch(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getConversionRate(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLatestPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getRoomStatus(
    _branchName: string,
    _roomNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<RoomStatusStructOutput>;

  motelBranches(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      branchName: string;
      totalRooms: BigNumber;
      branchId: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  totalBranches(overrides?: CallOverrides): Promise<BigNumber>;

  updateBranchDetails(
    _branchId: BigNumberish,
    _branchName: string,
    _totalRooms: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBranch(
      _branchId: BigNumberish,
      _totalRooms: BigNumberish,
      _branchName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkIn(
      _roomNumber: BigNumberish,
      _branchId: BigNumberish,
      _branchName: string,
      _time: BigNumberish,
      _usedBy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkOut(
      _branchName: string,
      _branchId: BigNumberish,
      _roomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    customers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, string, string, string] & {
        isOccupied: boolean;
        roomNumber: BigNumber;
        time: BigNumber;
        usedBy: string;
        bookingAddress: string;
        branch: string;
      }
    >;

    deleteBranch(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getConversionRate(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getRoomStatus(
      _branchName: string,
      _roomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<RoomStatusStructOutput>;

    motelBranches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        branchName: string;
        totalRooms: BigNumber;
        branchId: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    totalBranches(overrides?: CallOverrides): Promise<BigNumber>;

    updateBranchDetails(
      _branchId: BigNumberish,
      _branchName: string,
      _totalRooms: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addBranch(
      _branchId: BigNumberish,
      _totalRooms: BigNumberish,
      _branchName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkIn(
      _roomNumber: BigNumberish,
      _branchId: BigNumberish,
      _branchName: string,
      _time: BigNumberish,
      _usedBy: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkOut(
      _branchName: string,
      _branchId: BigNumberish,
      _roomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    customers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteBranch(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getConversionRate(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getRoomStatus(
      _branchName: string,
      _roomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    motelBranches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    totalBranches(overrides?: CallOverrides): Promise<BigNumber>;

    updateBranchDetails(
      _branchId: BigNumberish,
      _branchName: string,
      _totalRooms: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBranch(
      _branchId: BigNumberish,
      _totalRooms: BigNumberish,
      _branchName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkIn(
      _roomNumber: BigNumberish,
      _branchId: BigNumberish,
      _branchName: string,
      _time: BigNumberish,
      _usedBy: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkOut(
      _branchName: string,
      _branchId: BigNumberish,
      _roomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    customers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteBranch(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getConversionRate(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoomStatus(
      _branchName: string,
      _roomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    motelBranches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBranches(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateBranchDetails(
      _branchId: BigNumberish,
      _branchName: string,
      _totalRooms: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
